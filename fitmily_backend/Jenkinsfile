pipeline {
    agent any
    
    // 변수 선언 추가
    environment {
        GIT_AUTHOR_ID = ''
        GIT_AUTHOR_EMAIL = ''
    }
    
    stages {
        stage('Checkout') {
            // 기존 코드 유지
            steps {
                git branch: 'backend', credentialsId: 'gitlab-credentials', url: 'https://lab.ssafy.com/s12-final/S12P31D208.git'
                
                script {
                    def authorName = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    def authorEmail = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    
                    env.GIT_AUTHOR_NAME = authorName
                    env.GIT_AUTHOR_EMAIL = authorEmail
                    
                    echo "Git Author: ${env.GIT_AUTHOR_NAME}, Email: ${env.GIT_AUTHOR_EMAIL}"
                }
            }
        }
        
        stage('Build SpringBoot') {
            // 기존 코드 유지
            steps {
                dir('fitmily_backend/user-service') {
                    sh 'chmod +x ./gradlew || true'
                    sh './gradlew clean build -x test || mvn clean package -DskipTests'
                }
            }
        }

        stage('Docker Build & Deploy') {
            steps {
                dir('fitmily_backend') {
                    // 캐시 사용 방지
                    sh '/usr/local/bin/docker-compose build --no-cache || docker compose build --no-cache'
                    sh '/usr/local/bin/docker-compose up -d || docker compose up -d'
                }
            }
        }
        
        // 새로운 단계 추가: Nginx 설정 적용 및 재시작
        stage('Update Nginx Config') {
            steps {
                // Nginx 설정 파일 확인 및 재시작
                dir('fitmily_backend') {
                    sh 'echo "Applying latest Nginx configuration..."'
                    sh 'ls -la nginx/conf.d/'  // 설정 파일 존재 확인
                    sh '/usr/local/bin/docker-compose restart nginx || docker compose restart nginx'
                }
            }
        }

        stage('Health Check') {
            // 기존 코드 유지
            steps {
                sh 'sleep 15'
                sh 'curl -f http://localhost:8080/actuator/health || true'
            }
        }
    }
    
    // post 섹션 유지
    post {
        success {
            script {
                mattermostSend (color: 'good', 
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR_NAME}(${env.GIT_AUTHOR_EMAIL})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: 'https://meeting.ssafy.com/hooks/93zyedse8b8m7dmkjfwk6rhtfo', 
                channel: 'D208-Build-Bot'
                )
            }
        }
        failure {
            script {
                mattermostSend (color: 'danger', 
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR_NAME}(${env.GIT_AUTHOR_EMAIL})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: 'https://meeting.ssafy.com/hooks/93zyedse8b8m7dmkjfwk6rhtfo', 
                channel: 'D208-Build-Bot'
                )
            }
        }
        always {
            cleanWs()
        }
    }
}
