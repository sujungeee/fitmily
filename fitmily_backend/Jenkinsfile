pipeline {
    agent any
    
    environment {
        GIT_AUTHOR_ID = ''
        GIT_AUTHOR_EMAIL = ''
        // Jenkins 워크스페이스 경로 사용
        WORKSPACE_PATH = "${WORKSPACE}/fitmily_backend"
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'backend', credentialsId: 'gitlab-credentials', url: 'https://lab.ssafy.com/s12-final/S12P31D208.git'
                
                script {
                    def authorName = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    def authorEmail = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    
                    env.GIT_AUTHOR_NAME = authorName
                    env.GIT_AUTHOR_EMAIL = authorEmail
                    
                    echo "Git Author: ${env.GIT_AUTHOR_NAME}, Email: ${env.GIT_AUTHOR_EMAIL}"
                }
            }
        }
        
        // 시크릿 파일 생성
        stage('Prepare Secrets') {
            steps {
                dir('fitmily_backend') {
                    sh 'mkdir -p secrets'
                    withCredentials([
                        string(credentialsId: 'mysql-password', variable: 'MYSQL_PWD'),
                        string(credentialsId: 'mysql-root-password', variable: 'MYSQL_ROOT_PWD'),
                        string(credentialsId: 'jwt-secret', variable: 'JWT_SECRET_KEY')
                    ]) {
                        sh """
                            echo "$MYSQL_PWD" > secrets/mysql_password.txt
                            echo "$MYSQL_ROOT_PWD" > secrets/mysql_root_password.txt
                            echo "$JWT_SECRET_KEY" > secrets/jwt_secret.txt
                            chmod 600 secrets/*.txt
                            ls -la secrets/
                        """
                    }
                }
            }
        }
        
        stage('Build SpringBoot') {
            steps {
                dir('fitmily_backend/user-service') {
                    sh 'chmod +x ./gradlew || true'
                    sh './gradlew clean build -x test || mvn clean package -DskipTests'
                }
            }
        }

        stage('Docker Build & Deploy') {
            steps {
                dir('fitmily_backend') {
                    withCredentials([
                        string(credentialsId: 'mysql-password', variable: 'MYSQL_PWD'),
                        string(credentialsId: 'mysql-root-password', variable: 'MYSQL_ROOT_PWD'),
                        string(credentialsId: 'jwt-secret', variable: 'JWT_SECRET_KEY')
                    ]) {
                        sh '''
                            # 환경 변수로 직접 전달
                            export MYSQL_PASSWORD="$MYSQL_PWD"
                            export MYSQL_ROOT_PASSWORD="$MYSQL_ROOT_PWD" 
                            export JWT_SECRET="$JWT_SECRET_KEY"
                            
                            /usr/local/bin/docker-compose build
                            /usr/local/bin/docker-compose up -d
                        '''
                    }
                }
            }
        }


        
        stage('Update Nginx Config') {
            steps {
                dir('fitmily_backend') {
                    sh 'echo "Applying latest Nginx configuration..."'
                    sh 'ls -la nginx/conf.d/'
                    sh '/usr/local/bin/docker-compose restart nginx || docker compose restart nginx'
                }
            }
        }

        stage('Health Check') {
            steps {
                sh 'sleep 15'
                sh 'curl -f http://localhost:8080/actuator/health || true'
            }
        }
    }
    
    post {
        success {
            script {
                mattermostSend (
                    color: 'good',
                    message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR_NAME}(${env.GIT_AUTHOR_EMAIL})\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/93zyedse8b8m7dmkjfwk6rhtfo', 
                    channel: 'D208-Build-Bot'
                )
            }
        }
        failure {
            script {
                mattermostSend (
                    color: 'danger',
                    message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR_NAME}(${env.GIT_AUTHOR_EMAIL})\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/93zyedse8b8m7dmkjfwk6rhtfo', 
                    channel: 'D208-Build-Bot'
                )
            }
        }
        always {
            cleanWs()
        }
    }
}
